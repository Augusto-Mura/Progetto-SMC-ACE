
progetto_saumura.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007a8  080007b0  000107b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007a8  080007a8  000107b0  2**0
                  CONTENTS
  4 .ARM          00000000  080007a8  080007a8  000107b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007a8  080007b0  000107b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007a8  080007a8  000107a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007ac  080007ac  000107ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000000  080007b0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  080007b0  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000107b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000950  00000000  00000000  000107d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000024e  00000000  00000000  00011128  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000090  00000000  00000000  00011378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000078  00000000  00000000  00011408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008347  00000000  00000000  00011480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000005eb  00000000  00000000  000197c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002c212  00000000  00000000  00019db2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00045fc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000168  00000000  00000000  00046040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000790 	.word	0x08000790

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000790 	.word	0x08000790

08000108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000114:	1dfb      	adds	r3, r7, #7
 8000116:	781b      	ldrb	r3, [r3, #0]
 8000118:	2b7f      	cmp	r3, #127	; 0x7f
 800011a:	d809      	bhi.n	8000130 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800011c:	1dfb      	adds	r3, r7, #7
 800011e:	781b      	ldrb	r3, [r3, #0]
 8000120:	001a      	movs	r2, r3
 8000122:	231f      	movs	r3, #31
 8000124:	401a      	ands	r2, r3
 8000126:	4b04      	ldr	r3, [pc, #16]	; (8000138 <__NVIC_EnableIRQ+0x30>)
 8000128:	2101      	movs	r1, #1
 800012a:	4091      	lsls	r1, r2
 800012c:	000a      	movs	r2, r1
 800012e:	601a      	str	r2, [r3, #0]
  }
}
 8000130:	46c0      	nop			; (mov r8, r8)
 8000132:	46bd      	mov	sp, r7
 8000134:	b002      	add	sp, #8
 8000136:	bd80      	pop	{r7, pc}
 8000138:	e000e100 	.word	0xe000e100

0800013c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800013c:	b590      	push	{r4, r7, lr}
 800013e:	b083      	sub	sp, #12
 8000140:	af00      	add	r7, sp, #0
 8000142:	0002      	movs	r2, r0
 8000144:	6039      	str	r1, [r7, #0]
 8000146:	1dfb      	adds	r3, r7, #7
 8000148:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800014a:	1dfb      	adds	r3, r7, #7
 800014c:	781b      	ldrb	r3, [r3, #0]
 800014e:	2b7f      	cmp	r3, #127	; 0x7f
 8000150:	d828      	bhi.n	80001a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000152:	4a2f      	ldr	r2, [pc, #188]	; (8000210 <__NVIC_SetPriority+0xd4>)
 8000154:	1dfb      	adds	r3, r7, #7
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	b25b      	sxtb	r3, r3
 800015a:	089b      	lsrs	r3, r3, #2
 800015c:	33c0      	adds	r3, #192	; 0xc0
 800015e:	009b      	lsls	r3, r3, #2
 8000160:	589b      	ldr	r3, [r3, r2]
 8000162:	1dfa      	adds	r2, r7, #7
 8000164:	7812      	ldrb	r2, [r2, #0]
 8000166:	0011      	movs	r1, r2
 8000168:	2203      	movs	r2, #3
 800016a:	400a      	ands	r2, r1
 800016c:	00d2      	lsls	r2, r2, #3
 800016e:	21ff      	movs	r1, #255	; 0xff
 8000170:	4091      	lsls	r1, r2
 8000172:	000a      	movs	r2, r1
 8000174:	43d2      	mvns	r2, r2
 8000176:	401a      	ands	r2, r3
 8000178:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800017a:	683b      	ldr	r3, [r7, #0]
 800017c:	019b      	lsls	r3, r3, #6
 800017e:	22ff      	movs	r2, #255	; 0xff
 8000180:	401a      	ands	r2, r3
 8000182:	1dfb      	adds	r3, r7, #7
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	0018      	movs	r0, r3
 8000188:	2303      	movs	r3, #3
 800018a:	4003      	ands	r3, r0
 800018c:	00db      	lsls	r3, r3, #3
 800018e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000190:	481f      	ldr	r0, [pc, #124]	; (8000210 <__NVIC_SetPriority+0xd4>)
 8000192:	1dfb      	adds	r3, r7, #7
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	b25b      	sxtb	r3, r3
 8000198:	089b      	lsrs	r3, r3, #2
 800019a:	430a      	orrs	r2, r1
 800019c:	33c0      	adds	r3, #192	; 0xc0
 800019e:	009b      	lsls	r3, r3, #2
 80001a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80001a2:	e031      	b.n	8000208 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a4:	4a1b      	ldr	r2, [pc, #108]	; (8000214 <__NVIC_SetPriority+0xd8>)
 80001a6:	1dfb      	adds	r3, r7, #7
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	0019      	movs	r1, r3
 80001ac:	230f      	movs	r3, #15
 80001ae:	400b      	ands	r3, r1
 80001b0:	3b08      	subs	r3, #8
 80001b2:	089b      	lsrs	r3, r3, #2
 80001b4:	3306      	adds	r3, #6
 80001b6:	009b      	lsls	r3, r3, #2
 80001b8:	18d3      	adds	r3, r2, r3
 80001ba:	3304      	adds	r3, #4
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	1dfa      	adds	r2, r7, #7
 80001c0:	7812      	ldrb	r2, [r2, #0]
 80001c2:	0011      	movs	r1, r2
 80001c4:	2203      	movs	r2, #3
 80001c6:	400a      	ands	r2, r1
 80001c8:	00d2      	lsls	r2, r2, #3
 80001ca:	21ff      	movs	r1, #255	; 0xff
 80001cc:	4091      	lsls	r1, r2
 80001ce:	000a      	movs	r2, r1
 80001d0:	43d2      	mvns	r2, r2
 80001d2:	401a      	ands	r2, r3
 80001d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	019b      	lsls	r3, r3, #6
 80001da:	22ff      	movs	r2, #255	; 0xff
 80001dc:	401a      	ands	r2, r3
 80001de:	1dfb      	adds	r3, r7, #7
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	0018      	movs	r0, r3
 80001e4:	2303      	movs	r3, #3
 80001e6:	4003      	ands	r3, r0
 80001e8:	00db      	lsls	r3, r3, #3
 80001ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001ec:	4809      	ldr	r0, [pc, #36]	; (8000214 <__NVIC_SetPriority+0xd8>)
 80001ee:	1dfb      	adds	r3, r7, #7
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	001c      	movs	r4, r3
 80001f4:	230f      	movs	r3, #15
 80001f6:	4023      	ands	r3, r4
 80001f8:	3b08      	subs	r3, #8
 80001fa:	089b      	lsrs	r3, r3, #2
 80001fc:	430a      	orrs	r2, r1
 80001fe:	3306      	adds	r3, #6
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	18c3      	adds	r3, r0, r3
 8000204:	3304      	adds	r3, #4
 8000206:	601a      	str	r2, [r3, #0]
}
 8000208:	46c0      	nop			; (mov r8, r8)
 800020a:	46bd      	mov	sp, r7
 800020c:	b003      	add	sp, #12
 800020e:	bd90      	pop	{r4, r7, pc}
 8000210:	e000e100 	.word	0xe000e100
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <acquisisciSequenza>:
 */



//ABBIAMO NOTATO CHE IN OGNI PROVA NON RIESCE A VEDERE IL SECONDO CANALE
void acquisisciSequenza(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0

	int i = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]

	//Acquisisci tutti i canali

	for (i=0; i < N_CH; i++)
 8000222:	2300      	movs	r3, #0
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	e017      	b.n	8000258 <acquisisciSequenza+0x40>
	{
		ADC1->CR |= ADC_CR_ADSTART; /* Start the ADC conversion */
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <acquisisciSequenza+0x50>)
 800022a:	689a      	ldr	r2, [r3, #8]
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <acquisisciSequenza+0x50>)
 800022e:	2104      	movs	r1, #4
 8000230:	430a      	orrs	r2, r1
 8000232:	609a      	str	r2, [r3, #8]
		while ((ADC1->ISR & ADC_ISR_EOC) == 0) /* Wait end of conversion */
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <acquisisciSequenza+0x50>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2204      	movs	r2, #4
 800023c:	4013      	ands	r3, r2
 800023e:	d0fa      	beq.n	8000236 <acquisisciSequenza+0x1e>
		{
			/* For robust implementation, add here time-out management */
		}
		dati[i] = ADC1->DR; /* Store the ADC conversion result */
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <acquisisciSequenza+0x50>)
 8000242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000244:	0019      	movs	r1, r3
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <acquisisciSequenza+0x54>)
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	0092      	lsls	r2, r2, #2
 800024c:	50d1      	str	r1, [r2, r3]
		int gianni=0;
 800024e:	2300      	movs	r3, #0
 8000250:	603b      	str	r3, [r7, #0]
	for (i=0; i < N_CH; i++)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	3301      	adds	r3, #1
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b01      	cmp	r3, #1
 800025c:	dde4      	ble.n	8000228 <acquisisciSequenza+0x10>
//		dati[i] = ADC1->DR; /* Store the ADC conversion result */
//		if(i==N_CH-1){
//			ADC1->CR |= ADC_CR_ADSTP;
//		}
//	}
}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	46bd      	mov	sp, r7
 8000262:	b002      	add	sp, #8
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	40012400 	.word	0x40012400
 800026c:	20000034 	.word	0x20000034

08000270 <sendAlarm>:

void sendAlarm(int j, int mex_code){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	//Disabilito contatore del timer e l'enable interrupt
	TIM14->CR1 &= !TIM_CR1_CEN;
 800027a:	4b14      	ldr	r3, [pc, #80]	; (80002cc <sendAlarm+0x5c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4b13      	ldr	r3, [pc, #76]	; (80002cc <sendAlarm+0x5c>)
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
	TIM14->DIER &= !TIM_DIER_UIE;
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <sendAlarm+0x5c>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <sendAlarm+0x5c>)
 800028a:	2200      	movs	r2, #0
 800028c:	60da      	str	r2, [r3, #12]

	//manda messaggio(implemento semplicemente come un pin di output a 1 che sarà  un interrupt per il modulo wi-fi
	//altri 3 pin di output li uso per capire quale led si è rotto
	//e ultimi due pin li uso per capire se il guasto è pertinente o no, se si sono rotti tutti e a quale step appartiene (come nella legenda)
	GPIOC->ODR |= ((0b111 & j) << 1) | ((0b11 & mex_code) << 4); //costruisco la stringa di bit che il modulo wifi deve leggere
 800028e:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <sendAlarm+0x60>)
 8000290:	695a      	ldr	r2, [r3, #20]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	210e      	movs	r1, #14
 8000298:	4019      	ands	r1, r3
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	011b      	lsls	r3, r3, #4
 800029e:	2030      	movs	r0, #48	; 0x30
 80002a0:	4003      	ands	r3, r0
 80002a2:	430b      	orrs	r3, r1
 80002a4:	0019      	movs	r1, r3
 80002a6:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <sendAlarm+0x60>)
 80002a8:	430a      	orrs	r2, r1
 80002aa:	615a      	str	r2, [r3, #20]
	/*identificativo LED | mex_code*/
	GPIOC->ODR |= (0x1 << 6); //metto alto il segnale di interrupt dopo aver costruito tutta la stringa di bit
 80002ac:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <sendAlarm+0x60>)
 80002ae:	695a      	ldr	r2, [r3, #20]
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <sendAlarm+0x60>)
 80002b2:	2140      	movs	r1, #64	; 0x40
 80002b4:	430a      	orrs	r2, r1
 80002b6:	615a      	str	r2, [r3, #20]
	//rivedere per le tempistiche (forse necessario timer)
	GPIOC->ODR &= !(0xFFFF);//rimetto a 0 tutti i bit dopo che sono sicuro che il wifi abbiamo ricevuto l'interrupt
 80002b8:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <sendAlarm+0x60>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <sendAlarm+0x60>)
 80002be:	2200      	movs	r2, #0
 80002c0:	615a      	str	r2, [r3, #20]

}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	b002      	add	sp, #8
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	40002000 	.word	0x40002000
 80002d0:	48000800 	.word	0x48000800

080002d4 <TIM14_IRQHandler>:

void TIM14_IRQHandler(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
	int j = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]

	acquisisciSequenza();//aggiornamento dati[]
 80002de:	f7ff ff9b 	bl	8000218 <acquisisciSequenza>

	if(state == 0){
 80002e2:	4b71      	ldr	r3, [pc, #452]	; (80004a8 <TIM14_IRQHandler+0x1d4>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d149      	bne.n	800037e <TIM14_IRQHandler+0xaa>
		if(cnt < T_STEP0-1){//conta 4 ore
 80002ea:	4b70      	ldr	r3, [pc, #448]	; (80004ac <TIM14_IRQHandler+0x1d8>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b12      	cmp	r3, #18
 80002f0:	dc35      	bgt.n	800035e <TIM14_IRQHandler+0x8a>
			cnt++;
 80002f2:	4b6e      	ldr	r3, [pc, #440]	; (80004ac <TIM14_IRQHandler+0x1d8>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	4b6c      	ldr	r3, [pc, #432]	; (80004ac <TIM14_IRQHandler+0x1d8>)
 80002fa:	601a      	str	r2, [r3, #0]

			for(j=0; j < N_CH; j++){
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	e029      	b.n	8000356 <TIM14_IRQHandler+0x82>
				if(guasti[j] == 0){//se entra vuol dire che il LED j non è ancora dichiarato rotto, altrimenti non fare niente
 8000302:	4b6b      	ldr	r3, [pc, #428]	; (80004b0 <TIM14_IRQHandler+0x1dc>)
 8000304:	68fa      	ldr	r2, [r7, #12]
 8000306:	0092      	lsls	r2, r2, #2
 8000308:	58d3      	ldr	r3, [r2, r3]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d120      	bne.n	8000350 <TIM14_IRQHandler+0x7c>
					if(dati[j] > SOGLIA_0){
 800030e:	4b69      	ldr	r3, [pc, #420]	; (80004b4 <TIM14_IRQHandler+0x1e0>)
 8000310:	68fa      	ldr	r2, [r7, #12]
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	58d2      	ldr	r2, [r2, r3]
 8000316:	23fa      	movs	r3, #250	; 0xfa
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	429a      	cmp	r2, r3
 800031c:	dd18      	ble.n	8000350 <TIM14_IRQHandler+0x7c>
						//controllo se ho un guasto non pertinente
						cnt_soprasoglia[j]++;
 800031e:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <TIM14_IRQHandler+0x1e4>)
 8000320:	68fa      	ldr	r2, [r7, #12]
 8000322:	0092      	lsls	r2, r2, #2
 8000324:	58d3      	ldr	r3, [r2, r3]
 8000326:	1c59      	adds	r1, r3, #1
 8000328:	4b63      	ldr	r3, [pc, #396]	; (80004b8 <TIM14_IRQHandler+0x1e4>)
 800032a:	68fa      	ldr	r2, [r7, #12]
 800032c:	0092      	lsls	r2, r2, #2
 800032e:	50d1      	str	r1, [r2, r3]
						if(cnt_soprasoglia[j] > MAX_SOPRASOGLIA){
 8000330:	4b61      	ldr	r3, [pc, #388]	; (80004b8 <TIM14_IRQHandler+0x1e4>)
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	0092      	lsls	r2, r2, #2
 8000336:	58d3      	ldr	r3, [r2, r3]
 8000338:	2b05      	cmp	r3, #5
 800033a:	dd09      	ble.n	8000350 <TIM14_IRQHandler+0x7c>
							//guasto non pertinente
							guasti[j] = 2;
 800033c:	4b5c      	ldr	r3, [pc, #368]	; (80004b0 <TIM14_IRQHandler+0x1dc>)
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	0092      	lsls	r2, r2, #2
 8000342:	2102      	movs	r1, #2
 8000344:	50d1      	str	r1, [r2, r3]
							sendAlarm(j, 2);
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	2102      	movs	r1, #2
 800034a:	0018      	movs	r0, r3
 800034c:	f7ff ff90 	bl	8000270 <sendAlarm>
			for(j=0; j < N_CH; j++){
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3301      	adds	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	2b01      	cmp	r3, #1
 800035a:	ddd2      	ble.n	8000302 <TIM14_IRQHandler+0x2e>
 800035c:	e07e      	b.n	800045c <TIM14_IRQHandler+0x188>
			}
		}
		else{
			//mando l'avviso
			//stacco l'interruttore generale
			GPIOC->ODR &= !0x1;
 800035e:	4b57      	ldr	r3, [pc, #348]	; (80004bc <TIM14_IRQHandler+0x1e8>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4b56      	ldr	r3, [pc, #344]	; (80004bc <TIM14_IRQHandler+0x1e8>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
			//disabilito il timer
			TIM14->CR1 &= !TIM_CR1_CEN;
 8000368:	4b55      	ldr	r3, [pc, #340]	; (80004c0 <TIM14_IRQHandler+0x1ec>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4b54      	ldr	r3, [pc, #336]	; (80004c0 <TIM14_IRQHandler+0x1ec>)
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
			TIM14->DIER &= !TIM_DIER_UIE;
 8000372:	4b53      	ldr	r3, [pc, #332]	; (80004c0 <TIM14_IRQHandler+0x1ec>)
 8000374:	68db      	ldr	r3, [r3, #12]
 8000376:	4b52      	ldr	r3, [pc, #328]	; (80004c0 <TIM14_IRQHandler+0x1ec>)
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	e06e      	b.n	800045c <TIM14_IRQHandler+0x188>
		}
	}
	else{
		if(cnt < T_STEP1-1){//conto 2 secondi
 800037e:	4b4b      	ldr	r3, [pc, #300]	; (80004ac <TIM14_IRQHandler+0x1d8>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a50      	ldr	r2, [pc, #320]	; (80004c4 <TIM14_IRQHandler+0x1f0>)
 8000384:	4293      	cmp	r3, r2
 8000386:	dc5a      	bgt.n	800043e <TIM14_IRQHandler+0x16a>

			cnt++;
 8000388:	4b48      	ldr	r3, [pc, #288]	; (80004ac <TIM14_IRQHandler+0x1d8>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	1c5a      	adds	r2, r3, #1
 800038e:	4b47      	ldr	r3, [pc, #284]	; (80004ac <TIM14_IRQHandler+0x1d8>)
 8000390:	601a      	str	r2, [r3, #0]
			for(j=0; j < N_CH; j++){
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	e04e      	b.n	8000436 <TIM14_IRQHandler+0x162>
				if(guasti[j] == 0){//se entra vuol dire che il LED j non è ancora dichiarato rotto, altrimenti non fare niente
 8000398:	4b45      	ldr	r3, [pc, #276]	; (80004b0 <TIM14_IRQHandler+0x1dc>)
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	0092      	lsls	r2, r2, #2
 800039e:	58d3      	ldr	r3, [r2, r3]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d145      	bne.n	8000430 <TIM14_IRQHandler+0x15c>
					if(dati[j] > SOGLIA_1){
 80003a4:	4b43      	ldr	r3, [pc, #268]	; (80004b4 <TIM14_IRQHandler+0x1e0>)
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	0092      	lsls	r2, r2, #2
 80003aa:	58d2      	ldr	r2, [r2, r3]
 80003ac:	23fa      	movs	r3, #250	; 0xfa
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	429a      	cmp	r2, r3
 80003b2:	dd19      	ble.n	80003e8 <TIM14_IRQHandler+0x114>
						//controllo se ho un guasto pertinente
						cnt_soprasoglia[j]++;
 80003b4:	4b40      	ldr	r3, [pc, #256]	; (80004b8 <TIM14_IRQHandler+0x1e4>)
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	0092      	lsls	r2, r2, #2
 80003ba:	58d3      	ldr	r3, [r2, r3]
 80003bc:	1c59      	adds	r1, r3, #1
 80003be:	4b3e      	ldr	r3, [pc, #248]	; (80004b8 <TIM14_IRQHandler+0x1e4>)
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	0092      	lsls	r2, r2, #2
 80003c4:	50d1      	str	r1, [r2, r3]
						if(cnt_soprasoglia[j] > MAX_SOPRASOGLIA){
 80003c6:	4b3c      	ldr	r3, [pc, #240]	; (80004b8 <TIM14_IRQHandler+0x1e4>)
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	0092      	lsls	r2, r2, #2
 80003cc:	58d3      	ldr	r3, [r2, r3]
 80003ce:	2b05      	cmp	r3, #5
 80003d0:	dd1e      	ble.n	8000410 <TIM14_IRQHandler+0x13c>
							//guasto pertinente
							guasti[j] = 1;
 80003d2:	4b37      	ldr	r3, [pc, #220]	; (80004b0 <TIM14_IRQHandler+0x1dc>)
 80003d4:	68fa      	ldr	r2, [r7, #12]
 80003d6:	0092      	lsls	r2, r2, #2
 80003d8:	2101      	movs	r1, #1
 80003da:	50d1      	str	r1, [r2, r3]
							sendAlarm(j, 0);
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	2100      	movs	r1, #0
 80003e0:	0018      	movs	r0, r3
 80003e2:	f7ff ff45 	bl	8000270 <sendAlarm>
 80003e6:	e013      	b.n	8000410 <TIM14_IRQHandler+0x13c>

						}
					}else{
						//entra SOLO SE all'interrupt precedente era sopra la soglia
						//Tutto ciò funziona nell'ipotesi che le oscillazioni siano visibili a occhio nudo (60Hz)
						if(cnt_soprasoglia[j] != 0){
 80003e8:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <TIM14_IRQHandler+0x1e4>)
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	0092      	lsls	r2, r2, #2
 80003ee:	58d3      	ldr	r3, [r2, r3]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d00d      	beq.n	8000410 <TIM14_IRQHandler+0x13c>
							cnt_flutt[j]++;
 80003f4:	4b34      	ldr	r3, [pc, #208]	; (80004c8 <TIM14_IRQHandler+0x1f4>)
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	0092      	lsls	r2, r2, #2
 80003fa:	58d3      	ldr	r3, [r2, r3]
 80003fc:	1c59      	adds	r1, r3, #1
 80003fe:	4b32      	ldr	r3, [pc, #200]	; (80004c8 <TIM14_IRQHandler+0x1f4>)
 8000400:	68fa      	ldr	r2, [r7, #12]
 8000402:	0092      	lsls	r2, r2, #2
 8000404:	50d1      	str	r1, [r2, r3]
							cnt_soprasoglia[j] = 0;
 8000406:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <TIM14_IRQHandler+0x1e4>)
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	0092      	lsls	r2, r2, #2
 800040c:	2100      	movs	r1, #0
 800040e:	50d1      	str	r1, [r2, r3]
						}
					}

					if(cnt_flutt[j] > MAX_FLUTT){
 8000410:	4b2d      	ldr	r3, [pc, #180]	; (80004c8 <TIM14_IRQHandler+0x1f4>)
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	0092      	lsls	r2, r2, #2
 8000416:	58d3      	ldr	r3, [r2, r3]
 8000418:	2b05      	cmp	r3, #5
 800041a:	dd09      	ble.n	8000430 <TIM14_IRQHandler+0x15c>
						//guasto NON pertinente
						guasti[j] = 2;
 800041c:	4b24      	ldr	r3, [pc, #144]	; (80004b0 <TIM14_IRQHandler+0x1dc>)
 800041e:	68fa      	ldr	r2, [r7, #12]
 8000420:	0092      	lsls	r2, r2, #2
 8000422:	2102      	movs	r1, #2
 8000424:	50d1      	str	r1, [r2, r3]
						sendAlarm(j, 1);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	2101      	movs	r1, #1
 800042a:	0018      	movs	r0, r3
 800042c:	f7ff ff20 	bl	8000270 <sendAlarm>
			for(j=0; j < N_CH; j++){
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	3301      	adds	r3, #1
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	2b01      	cmp	r3, #1
 800043a:	ddad      	ble.n	8000398 <TIM14_IRQHandler+0xc4>
 800043c:	e00e      	b.n	800045c <TIM14_IRQHandler+0x188>
			}
		}
		else{
			//mando l'avviso
			//stacco l'interruttore generale
			GPIOC->ODR &= !0x1;
 800043e:	4b1f      	ldr	r3, [pc, #124]	; (80004bc <TIM14_IRQHandler+0x1e8>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <TIM14_IRQHandler+0x1e8>)
 8000444:	2200      	movs	r2, #0
 8000446:	615a      	str	r2, [r3, #20]
			//disabilito il timer
			TIM14->CR1 &= !TIM_CR1_CEN;
 8000448:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <TIM14_IRQHandler+0x1ec>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <TIM14_IRQHandler+0x1ec>)
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
			TIM14->DIER &= !TIM_DIER_UIE;
 8000452:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <TIM14_IRQHandler+0x1ec>)
 8000454:	68db      	ldr	r3, [r3, #12]
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <TIM14_IRQHandler+0x1ec>)
 8000458:	2200      	movs	r2, #0
 800045a:	60da      	str	r2, [r3, #12]
		}
	}

	//così stacco l'interruttore generale, disabilito il timer e mando il messaggio di fine prova(ultimo interrupt al wifi)
	int sum = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	60bb      	str	r3, [r7, #8]
	for(int i=0; i < N_CH; i++){
 8000460:	2300      	movs	r3, #0
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	e00b      	b.n	800047e <TIM14_IRQHandler+0x1aa>
		if(guasti[i]!=0)
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <TIM14_IRQHandler+0x1dc>)
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	0092      	lsls	r2, r2, #2
 800046c:	58d3      	ldr	r3, [r2, r3]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d002      	beq.n	8000478 <TIM14_IRQHandler+0x1a4>
			sum++;
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	3301      	adds	r3, #1
 8000476:	60bb      	str	r3, [r7, #8]
	for(int i=0; i < N_CH; i++){
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3301      	adds	r3, #1
 800047c:	607b      	str	r3, [r7, #4]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b01      	cmp	r3, #1
 8000482:	ddf0      	ble.n	8000466 <TIM14_IRQHandler+0x192>
	}
	if(sum == N_CH){
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	2b02      	cmp	r3, #2
 8000488:	d105      	bne.n	8000496 <TIM14_IRQHandler+0x1c2>
		//Prova finita--->SEND ALLARM 2
		sendAlarm(-1,3);//il primo valore verrà ignorato dal modulo wifi
 800048a:	2301      	movs	r3, #1
 800048c:	425b      	negs	r3, r3
 800048e:	2103      	movs	r1, #3
 8000490:	0018      	movs	r0, r3
 8000492:	f7ff feed 	bl	8000270 <sendAlarm>
		//stacco l'interruttore generale
		//Il timer è già spento da sendAlarm!!!
	}

	TIM14->SR &= !TIM_SR_UIF;
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <TIM14_IRQHandler+0x1ec>)
 8000498:	691b      	ldr	r3, [r3, #16]
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <TIM14_IRQHandler+0x1ec>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
}
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	b004      	add	sp, #16
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000020 	.word	0x20000020
 80004ac:	2000001c 	.word	0x2000001c
 80004b0:	2000002c 	.word	0x2000002c
 80004b4:	20000034 	.word	0x20000034
 80004b8:	20000024 	.word	0x20000024
 80004bc:	48000800 	.word	0x48000800
 80004c0:	40002000 	.word	0x40002000
 80004c4:	000007ce 	.word	0x000007ce
 80004c8:	2000003c 	.word	0x2000003c

080004cc <EXTI4_15_IRQHandler>:
2)step0/1 si interrompono prima del tempo a causa di un guasto
cnt < T_STEP_0/1 ----> state non deve cambiare e cnt rimane allo stesso valore per continuare a contare fino alla fine della prova

Dopodichè viene riattivato il contatore del timer, l'interrupt enable e l'interruttore generale
*/
void EXTI4_15_IRQHandler(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	if(state == 0){
 80004d0:	4b1a      	ldr	r3, [pc, #104]	; (800053c <EXTI4_15_IRQHandler+0x70>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d10a      	bne.n	80004ee <EXTI4_15_IRQHandler+0x22>
		if(cnt >= T_STEP0){
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <EXTI4_15_IRQHandler+0x74>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b13      	cmp	r3, #19
 80004de:	dd11      	ble.n	8000504 <EXTI4_15_IRQHandler+0x38>
			state = 1;
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <EXTI4_15_IRQHandler+0x70>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
			cnt=0;
 80004e6:	4b16      	ldr	r3, [pc, #88]	; (8000540 <EXTI4_15_IRQHandler+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	e00a      	b.n	8000504 <EXTI4_15_IRQHandler+0x38>
		}
	}
	else {
		if(cnt >= T_STEP1){
 80004ee:	4b14      	ldr	r3, [pc, #80]	; (8000540 <EXTI4_15_IRQHandler+0x74>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a14      	ldr	r2, [pc, #80]	; (8000544 <EXTI4_15_IRQHandler+0x78>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	dd05      	ble.n	8000504 <EXTI4_15_IRQHandler+0x38>
			state = 0;
 80004f8:	4b10      	ldr	r3, [pc, #64]	; (800053c <EXTI4_15_IRQHandler+0x70>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
			cnt=0;
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <EXTI4_15_IRQHandler+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
		}
	}


	//abilito il timer
	TIM14->CR1 |= TIM_CR1_CEN;
 8000504:	4b10      	ldr	r3, [pc, #64]	; (8000548 <EXTI4_15_IRQHandler+0x7c>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <EXTI4_15_IRQHandler+0x7c>)
 800050a:	2101      	movs	r1, #1
 800050c:	430a      	orrs	r2, r1
 800050e:	601a      	str	r2, [r3, #0]
	TIM14->DIER |= TIM_DIER_UIE;
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <EXTI4_15_IRQHandler+0x7c>)
 8000512:	68da      	ldr	r2, [r3, #12]
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <EXTI4_15_IRQHandler+0x7c>)
 8000516:	2101      	movs	r1, #1
 8000518:	430a      	orrs	r2, r1
 800051a:	60da      	str	r2, [r3, #12]

	//riattacca l'interruttore generale
	GPIOC->ODR |= 0x1;
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <EXTI4_15_IRQHandler+0x80>)
 800051e:	695a      	ldr	r2, [r3, #20]
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <EXTI4_15_IRQHandler+0x80>)
 8000522:	2101      	movs	r1, #1
 8000524:	430a      	orrs	r2, r1
 8000526:	615a      	str	r2, [r3, #20]

	EXTI->PR |= EXTI_PR_PIF7;
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <EXTI4_15_IRQHandler+0x84>)
 800052a:	695a      	ldr	r2, [r3, #20]
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <EXTI4_15_IRQHandler+0x84>)
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	430a      	orrs	r2, r1
 8000532:	615a      	str	r2, [r3, #20]
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	20000020 	.word	0x20000020
 8000540:	2000001c 	.word	0x2000001c
 8000544:	000007cf 	.word	0x000007cf
 8000548:	40002000 	.word	0x40002000
 800054c:	48000800 	.word	0x48000800
 8000550:	40010400 	.word	0x40010400

08000554 <configuraADC1>:

/////////////////////////////////////////////
//FUNZIONI DI CONFIGURAZIONE DELLE PERIFERICHE
/////////////////////////////////////////////

void configuraADC1(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	//CALIBRAZIONE
	RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 8000558:	4b2d      	ldr	r3, [pc, #180]	; (8000610 <configuraADC1+0xbc>)
 800055a:	699a      	ldr	r2, [r3, #24]
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <configuraADC1+0xbc>)
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	0089      	lsls	r1, r1, #2
 8000562:	430a      	orrs	r2, r1
 8000564:	619a      	str	r2, [r3, #24]
	if ((ADC1->CR & ADC_CR_ADEN) != 0){
 8000566:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <configuraADC1+0xc0>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	2201      	movs	r2, #1
 800056c:	4013      	ands	r3, r2
 800056e:	d005      	beq.n	800057c <configuraADC1+0x28>
		ADC1->CR |= ADC_CR_ADDIS;
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <configuraADC1+0xc0>)
 8000572:	689a      	ldr	r2, [r3, #8]
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <configuraADC1+0xc0>)
 8000576:	2102      	movs	r1, #2
 8000578:	430a      	orrs	r2, r1
 800057a:	609a      	str	r2, [r3, #8]
	}
	while ((ADC1->CR & ADC_CR_ADEN) != 0);
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	4b25      	ldr	r3, [pc, #148]	; (8000614 <configuraADC1+0xc0>)
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	2201      	movs	r2, #1
 8000584:	4013      	ands	r3, r2
 8000586:	d1fa      	bne.n	800057e <configuraADC1+0x2a>
	ADC1->CR |= ADC_CR_ADCAL;
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <configuraADC1+0xc0>)
 800058a:	689a      	ldr	r2, [r3, #8]
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <configuraADC1+0xc0>)
 800058e:	2180      	movs	r1, #128	; 0x80
 8000590:	0609      	lsls	r1, r1, #24
 8000592:	430a      	orrs	r2, r1
 8000594:	609a      	str	r2, [r3, #8]
	while ((ADC1->CR & ADC_CR_ADCAL) != 0);
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <configuraADC1+0xc0>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	2b00      	cmp	r3, #0
 800059e:	dbfb      	blt.n	8000598 <configuraADC1+0x44>

	//ABILITAZIONE
	if ((ADC1->ISR & ADC_ISR_ADRDY) != 0){
 80005a0:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <configuraADC1+0xc0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2201      	movs	r2, #1
 80005a6:	4013      	ands	r3, r2
 80005a8:	d005      	beq.n	80005b6 <configuraADC1+0x62>
		ADC1->ISR |= ADC_ISR_ADRDY;
 80005aa:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <configuraADC1+0xc0>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <configuraADC1+0xc0>)
 80005b0:	2101      	movs	r1, #1
 80005b2:	430a      	orrs	r2, r1
 80005b4:	601a      	str	r2, [r3, #0]
	}
	ADC1->CR |= ADC_CR_ADEN;
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <configuraADC1+0xc0>)
 80005b8:	689a      	ldr	r2, [r3, #8]
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <configuraADC1+0xc0>)
 80005bc:	2101      	movs	r1, #1
 80005be:	430a      	orrs	r2, r1
 80005c0:	609a      	str	r2, [r3, #8]
	while ((ADC1->ISR & ADC_ISR_ADRDY) == 0);
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <configuraADC1+0xc0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2201      	movs	r2, #1
 80005ca:	4013      	ands	r3, r2
 80005cc:	d0fa      	beq.n	80005c4 <configuraADC1+0x70>

	//CONFIGURAZIONE
	ADC1->CFGR2 &= ~ADC_CFGR2_CKMODE;//clock asincrono
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <configuraADC1+0xc0>)
 80005d0:	691a      	ldr	r2, [r3, #16]
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <configuraADC1+0xc0>)
 80005d4:	0092      	lsls	r2, r2, #2
 80005d6:	0892      	lsrs	r2, r2, #2
 80005d8:	611a      	str	r2, [r3, #16]

	//Abbiamo attivato solo 2 canali per prova
	ADC1->CHSELR |= ADC_CHSELR_CHSEL0 | ADC_CHSELR_CHSEL1; //| ADC_CHSELR_CHSEL4 |
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <configuraADC1+0xc0>)
 80005dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <configuraADC1+0xc0>)
 80005e0:	2103      	movs	r1, #3
 80005e2:	430a      	orrs	r2, r1
 80005e4:	629a      	str	r2, [r3, #40]	; 0x28
			//ADC_CHSELR_CHSEL5 | ADC_CHSELR_CHSEL6 | ADC_CHSELR_CHSEL7 | ADC_CHSELR_CHSEL8 |ADC_CHSELR_CHSEL9;

	ADC1->SMPR &= !ADC_SMPR_SMP;//frequenza massima di sampling, ricontrollare tempo campionamento
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <configuraADC1+0xc0>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <configuraADC1+0xc0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
	//ma si mette tilde o la not! ???
	ADC1->CFGR1 &= !(ADC_CFGR1_RES | ADC_CFGR1_CONT);
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <configuraADC1+0xc0>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <configuraADC1+0xc0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	ADC1->CFGR1 |= ADC_CFGR1_DISCEN;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <configuraADC1+0xc0>)
 80005fc:	68da      	ldr	r2, [r3, #12]
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <configuraADC1+0xc0>)
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	0249      	lsls	r1, r1, #9
 8000604:	430a      	orrs	r2, r1
 8000606:	60da      	str	r2, [r3, #12]
	//risoluzione 12 bit (default), modalità  single mode

}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40021000 	.word	0x40021000
 8000614:	40012400 	.word	0x40012400

08000618 <configuraTIM14>:

void configuraTIM14(void){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;//accendo il timer
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <configuraTIM14+0x2c>)
 800061e:	69da      	ldr	r2, [r3, #28]
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <configuraTIM14+0x2c>)
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	0049      	lsls	r1, r1, #1
 8000626:	430a      	orrs	r2, r1
 8000628:	61da      	str	r2, [r3, #28]
	TIM14->PSC = 7;//feq=1 Mhz Teq=1us
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <configuraTIM14+0x30>)
 800062c:	2207      	movs	r2, #7
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM14->ARR = T_SAMPLE - 1;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <configuraTIM14+0x30>)
 8000632:	4a06      	ldr	r2, [pc, #24]	; (800064c <configuraTIM14+0x34>)
 8000634:	62da      	str	r2, [r3, #44]	; 0x2c
	//il timer e il relativo interrupt viene fatto partire con l'interrupt dell'EXTI
	NVIC_EnableIRQ(TIM14_IRQn);
 8000636:	2013      	movs	r0, #19
 8000638:	f7ff fd66 	bl	8000108 <__NVIC_EnableIRQ>
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	40021000 	.word	0x40021000
 8000648:	40002000 	.word	0x40002000
 800064c:	000003e7 	.word	0x000003e7

08000650 <configuraGPIO>:

void configuraGPIO(void){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	//CONFIGURAZIONE PORTE OUTPUT PER MANDARE I DATI
	//1 transistor per comandare il passaggio di corrente a monte
	//6 pin per mandare il messaggio al modulo wi-fi
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <configuraGPIO+0x7c>)
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <configuraGPIO+0x7c>)
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	0309      	lsls	r1, r1, #12
 800065e:	430a      	orrs	r2, r1
 8000660:	615a      	str	r2, [r3, #20]

	//CONFIGURO pin C0 IN OUTPUT PER COMANDARE IL TRANSISTOR CHE COMANDA LA CORRENTE
	//IL RESTO DEI PIN DI C SCELTI COME OUTPUT PER INVIARE IL MESSAGGIO AL MODULO WI-FI
	//pin C7 è usato come interrupt exti per cambiare lo state
	GPIOC->MODER |= GPIO_MODER_MODER0_0 |  GPIO_MODER_MODER1_0 | GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 |
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <configuraGPIO+0x80>)
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <configuraGPIO+0x80>)
 8000668:	491a      	ldr	r1, [pc, #104]	; (80006d4 <configuraGPIO+0x84>)
 800066a:	430a      	orrs	r2, r1
 800066c:	601a      	str	r2, [r3, #0]
			GPIO_MODER_MODER5_0 | GPIO_MODER_MODER6_0; // !GPIO_MODER_MODER7_0; questo è già  a 0, quindi in input
	GPIOC->ODR &= !(0xFFFF);
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <configuraGPIO+0x80>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <configuraGPIO+0x80>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
	GPIOC->PUPDR |= GPIO_PUPDR_PUPDR7_1;//resistenza di pull down per portare il pin flottante a 0 quando interruttore aperto
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <configuraGPIO+0x80>)
 800067a:	68da      	ldr	r2, [r3, #12]
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <configuraGPIO+0x80>)
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	0209      	lsls	r1, r1, #8
 8000682:	430a      	orrs	r2, r1
 8000684:	60da      	str	r2, [r3, #12]

	//CONFIGURAZIONE PORTE INPUT PER ACQUISIRE I SEGNALI NON è NECESSARIA
	//POICHE' L'ADC è GIà  COLLEGATO AI PIN DI DEFAULT

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <configuraGPIO+0x7c>)
 8000688:	699a      	ldr	r2, [r3, #24]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <configuraGPIO+0x7c>)
 800068c:	2101      	movs	r1, #1
 800068e:	430a      	orrs	r2, r1
 8000690:	619a      	str	r2, [r3, #24]
	SYSCFG->EXTICR[1] |= 0x2 << SYSCFG_EXTICR2_EXTI7_Pos;//abilito porta c per interrupt
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <configuraGPIO+0x88>)
 8000694:	68da      	ldr	r2, [r3, #12]
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <configuraGPIO+0x88>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0189      	lsls	r1, r1, #6
 800069c:	430a      	orrs	r2, r1
 800069e:	60da      	str	r2, [r3, #12]
	EXTI->IMR |= EXTI_IMR_IM7;
 80006a0:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <configuraGPIO+0x8c>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <configuraGPIO+0x8c>)
 80006a6:	2180      	movs	r1, #128	; 0x80
 80006a8:	430a      	orrs	r2, r1
 80006aa:	601a      	str	r2, [r3, #0]
	EXTI->RTSR |= EXTI_RTSR_RT7; //valore di default
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <configuraGPIO+0x8c>)
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <configuraGPIO+0x8c>)
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	430a      	orrs	r2, r1
 80006b6:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006b8:	2007      	movs	r0, #7
 80006ba:	f7ff fd25 	bl	8000108 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI4_15_IRQn, 0);//TIM14 ha priorità  minore di default
 80006be:	2100      	movs	r1, #0
 80006c0:	2007      	movs	r0, #7
 80006c2:	f7ff fd3b 	bl	800013c <__NVIC_SetPriority>
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000800 	.word	0x48000800
 80006d4:	00001555 	.word	0x00001555
 80006d8:	40010000 	.word	0x40010000
 80006dc:	40010400 	.word	0x40010400

080006e0 <main>:


int main(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

	configuraADC1();
 80006e4:	f7ff ff36 	bl	8000554 <configuraADC1>
	configuraTIM14();
 80006e8:	f7ff ff96 	bl	8000618 <configuraTIM14>
	configuraGPIO();
 80006ec:	f7ff ffb0 	bl	8000650 <configuraGPIO>

	while(1){
 80006f0:	e7fe      	b.n	80006f0 <main+0x10>
	...

080006f4 <Reset_Handler>:
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <LoopForever+0x2>)
 80006f6:	4685      	mov	sp, r0
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <LoopForever+0x6>)
 80006fa:	490e      	ldr	r1, [pc, #56]	; (8000734 <LoopForever+0xa>)
 80006fc:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <LoopForever+0xe>)
 80006fe:	2300      	movs	r3, #0
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:
 8000702:	58d4      	ldr	r4, [r2, r3]
 8000704:	50c4      	str	r4, [r0, r3]
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:
 8000708:	18c4      	adds	r4, r0, r3
 800070a:	428c      	cmp	r4, r1
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <LoopForever+0x12>)
 8000710:	4c0b      	ldr	r4, [pc, #44]	; (8000740 <LoopForever+0x16>)
 8000712:	2300      	movs	r3, #0
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:
 800071a:	42a2      	cmp	r2, r4
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>
 800071e:	e000      	b.n	8000722 <LoopFillZerobss+0x8>
 8000720:	bf00      	nop
 8000722:	f000 f811 	bl	8000748 <__libc_init_array>
 8000726:	f7ff ffdb 	bl	80006e0 <main>

0800072a <LoopForever>:
 800072a:	e7fe      	b.n	800072a <LoopForever>
 800072c:	20002000 	.word	0x20002000
 8000730:	20000000 	.word	0x20000000
 8000734:	20000000 	.word	0x20000000
 8000738:	080007b0 	.word	0x080007b0
 800073c:	20000000 	.word	0x20000000
 8000740:	20000044 	.word	0x20000044

08000744 <ADC_IRQHandler>:
 8000744:	e7fe      	b.n	8000744 <ADC_IRQHandler>
	...

08000748 <__libc_init_array>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	2600      	movs	r6, #0
 800074c:	4d0c      	ldr	r5, [pc, #48]	; (8000780 <__libc_init_array+0x38>)
 800074e:	4c0d      	ldr	r4, [pc, #52]	; (8000784 <__libc_init_array+0x3c>)
 8000750:	1b64      	subs	r4, r4, r5
 8000752:	10a4      	asrs	r4, r4, #2
 8000754:	42a6      	cmp	r6, r4
 8000756:	d109      	bne.n	800076c <__libc_init_array+0x24>
 8000758:	2600      	movs	r6, #0
 800075a:	f000 f819 	bl	8000790 <_init>
 800075e:	4d0a      	ldr	r5, [pc, #40]	; (8000788 <__libc_init_array+0x40>)
 8000760:	4c0a      	ldr	r4, [pc, #40]	; (800078c <__libc_init_array+0x44>)
 8000762:	1b64      	subs	r4, r4, r5
 8000764:	10a4      	asrs	r4, r4, #2
 8000766:	42a6      	cmp	r6, r4
 8000768:	d105      	bne.n	8000776 <__libc_init_array+0x2e>
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	00b3      	lsls	r3, r6, #2
 800076e:	58eb      	ldr	r3, [r5, r3]
 8000770:	4798      	blx	r3
 8000772:	3601      	adds	r6, #1
 8000774:	e7ee      	b.n	8000754 <__libc_init_array+0xc>
 8000776:	00b3      	lsls	r3, r6, #2
 8000778:	58eb      	ldr	r3, [r5, r3]
 800077a:	4798      	blx	r3
 800077c:	3601      	adds	r6, #1
 800077e:	e7f2      	b.n	8000766 <__libc_init_array+0x1e>
 8000780:	080007a8 	.word	0x080007a8
 8000784:	080007a8 	.word	0x080007a8
 8000788:	080007a8 	.word	0x080007a8
 800078c:	080007ac 	.word	0x080007ac

08000790 <_init>:
 8000790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000796:	bc08      	pop	{r3}
 8000798:	469e      	mov	lr, r3
 800079a:	4770      	bx	lr

0800079c <_fini>:
 800079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007a2:	bc08      	pop	{r3}
 80007a4:	469e      	mov	lr, r3
 80007a6:	4770      	bx	lr
